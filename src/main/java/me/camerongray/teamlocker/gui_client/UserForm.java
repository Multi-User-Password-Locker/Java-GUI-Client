/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.camerongray.teamlocker.gui_client;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import me.camerongray.teamlocker.core.CryptoException;
import me.camerongray.teamlocker.core.Folder;
import me.camerongray.teamlocker.core.FolderPermission;
import me.camerongray.teamlocker.core.Locker;
import me.camerongray.teamlocker.core.LockerCommunicationException;
import me.camerongray.teamlocker.core.LockerSimpleException;
import me.camerongray.teamlocker.core.LockerRuntimeException;
import me.camerongray.teamlocker.core.User;
import me.camerongray.teamlocker.core.Validation;

/**
 *
 * @author camerong
 */
public class UserForm extends javax.swing.JDialog {
    public static final int EDIT_MODE = 0;
    public static final int NEW_MODE = 1;
    private int mode;
    private Locker locker;
    private StatusBar statusBar;
    private java.awt.Frame parent;
    private javax.swing.JDialog indexDialog;
    private Folder[] folders;

    /**
     * Creates new form UserForm
     */
    public UserForm(java.awt.Frame parent, boolean modal, javax.swing.JDialog indexDialog, int mode, Folder[] folders) {
        super(parent, modal);
        this.mode = mode;
        this.locker = Locker.getInstance();
        initComponents();
        this.statusBar = new StatusBar(lblStatus, pgbProgress);
        this.statusBar.hide();
        this.parent = parent;
        this.indexDialog = indexDialog;
        this.folders = folders;
        
        lblAdminPermissions.setVisible(false);
        if (mode == UserForm.EDIT_MODE) {
            this.setTitle("Edit User - TeamLocker");
            btnSubmit.setText("Save User");
            txtPassword.setVisible(false);
            txtPasswordConfirm.setVisible(false);
            lblPassword.setVisible(false);
            lblPasswordConfirm.setVisible(false);
        } else  {
            this.setTitle("New User - TeamLocker");
            btnSubmit.setText("Add User");
            btnChangePassword.setVisible(false);
            DefaultTableModel model = (DefaultTableModel) tblPermissions.getModel();
            for (Folder folder : this.folders) {
                model.addRow(new Object[]{folder, false, false});
            }
        }
        this.getRootPane().setDefaultButton(btnSubmit);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblPasswordConfirm = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        txtPasswordConfirm = new javax.swing.JPasswordField();
        btnChangePassword = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lstUserType = new javax.swing.JComboBox<>();
        btnCancel = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        spPermissions = new javax.swing.JScrollPane();
        tblPermissions = new javax.swing.JTable();
        panelStatus = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        pgbProgress = new javax.swing.JProgressBar();
        lblPermissions = new javax.swing.JLabel();
        lblAdminPermissions = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);

        jLabel1.setText("Full Name");

        jLabel2.setText("Username");

        jLabel3.setText("Email Address");

        lblPassword.setText("Password");

        lblPasswordConfirm.setText("Password (Confirm)");

        btnChangePassword.setText("Change Password");
        btnChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePasswordActionPerformed(evt);
            }
        });

        jLabel6.setText("Type");

        lstUserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Standard User", "Administrator" }));
        lstUserType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstUserTypeActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSubmit.setText(" ");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        tblPermissions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folder", "Read", "Write"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPermissions.getTableHeader().setReorderingAllowed(false);
        spPermissions.setViewportView(tblPermissions);

        lblStatus.setText("NONE");

        javax.swing.GroupLayout panelStatusLayout = new javax.swing.GroupLayout(panelStatus);
        panelStatus.setLayout(panelStatusLayout);
        panelStatusLayout.setHorizontalGroup(
            panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
        );
        panelStatusLayout.setVerticalGroup(
            panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelStatusLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblStatus)
                    .addComponent(pgbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        lblPermissions.setText("Permissions");

        lblAdminPermissions.setText("Administrators have full read/write access to all folders");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCancel)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(panelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSubmit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPasswordConfirm)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(lblPassword)
                            .addComponent(jLabel6)
                            .addComponent(lblPermissions))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblAdminPermissions)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtPassword)
                            .addComponent(txtFullName)
                            .addComponent(txtUsername)
                            .addComponent(txtEmail)
                            .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lstUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnChangePassword))
                                .addGap(295, 321, Short.MAX_VALUE))
                            .addComponent(spPermissions))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPasswordConfirm)
                    .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChangePassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lstUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPermissions)
                    .addComponent(spPermissions, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAdminPermissions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSubmit)
                    .addComponent(btnCancel)
                    .addComponent(panelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePasswordActionPerformed
        txtPassword.setVisible(true);
        txtPasswordConfirm.setVisible(true);
        btnChangePassword.setVisible(false);
        lblPassword.setVisible(true);
        lblPasswordConfirm.setVisible(true);
    }//GEN-LAST:event_btnChangePasswordActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        boolean isAdmin = ((String)lstUserType.getSelectedItem()).equals("Administrator");
        
        if (isAdmin) {
            int confirm = JOptionPane.showConfirmDialog(this, "You are about to create a"+
                    " user with administrator privileges.\n\nThis means that the user has"+
                    " full control over all accounts in the system, can add/modify users"+
                    " and cannot be restricted to specific folders.\n\nAre you sure that you"+
                    " want to continue?", "Creating Administrator User",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        if (!Arrays.equals(txtPassword.getPassword(), txtPasswordConfirm.getPassword())) {
            JOptionPane.showMessageDialog(this, "Passwords do not match!", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        statusBar.setStatus("Adding User...", true);
        
        (new AddUserTask(this, this.locker, txtUsername.getText(), new String(txtPassword.getPassword()), txtFullName.getText(), txtEmail.getText(), isAdmin)).execute();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void lstUserTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstUserTypeActionPerformed
        if (lstUserType.getSelectedItem() == "Administrator") {
            spPermissions.setVisible(false);
            lblPermissions.setVisible(false);
            lblAdminPermissions.setVisible(true);
        } else {
            spPermissions.setVisible(true);
            lblPermissions.setVisible(true);
            lblAdminPermissions.setVisible(false);
        }
    }//GEN-LAST:event_lstUserTypeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChangePassword;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAdminPermissions;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPasswordConfirm;
    private javax.swing.JLabel lblPermissions;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JComboBox<String> lstUserType;
    private javax.swing.JPanel panelStatus;
    private javax.swing.JProgressBar pgbProgress;
    private javax.swing.JScrollPane spPermissions;
    private javax.swing.JTable tblPermissions;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordConfirm;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    class AddUserTask extends SwingWorker<Void, String> {
        private UserForm dialog;
        private Locker locker;
        private String username;
        private String password;
        private String fullName;
        private String email;
        private boolean isAdmin;

        public AddUserTask(UserForm dialog, Locker locker, String username, String password, String fullName, String email, boolean isAdmin) {
            this.dialog = dialog;
            this.locker = locker;
            this.username = username;
            this.password = password;
            this.fullName = fullName;
            this.email = email;
            this.isAdmin = isAdmin;
        }

        @Override
        protected Void doInBackground() throws LockerSimpleException, CryptoException, LockerCommunicationException, IOException, LockerRuntimeException {
            // TEMPOARY BODGE!
            // TODO: This should be removed once server-side transactions are implemented
            DefaultTableModel model2 = (DefaultTableModel) tblPermissions.getModel();
            for (int i = 0; i < model2.getRowCount(); i++) {
                boolean read = (Boolean)model2.getValueAt(i, 1);
                boolean write = (Boolean)model2.getValueAt(i, 2);
                if (write && !read) {
                    throw new LockerSimpleException("Must have read permission to have write permission on a folder.");
                }
            }
            
            User user = new User(this.fullName, this.username, this.email, this.password, this.isAdmin);
            user.addToServer();
            
            if (!user.isAdmin()) {
                final int FOLDER_COL = 0;
                final int READ_COL = 1;
                final int WRITE_COL = 2;
                publish("Setting permissions...");
                DefaultTableModel model = (DefaultTableModel) tblPermissions.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    Folder folder = (Folder)model.getValueAt(i, FOLDER_COL);
                    boolean read = (Boolean)model.getValueAt(i, READ_COL);
                    boolean write = (Boolean)model.getValueAt(i, WRITE_COL);
                    // TODO: This should be removed once server-side transactions are implemented
                    if (write && !read) {
                        throw new LockerSimpleException("Must have read permission to have write permission on a folder.");
                    }
                    FolderPermission fp = new FolderPermission(user, folder, read, write);
                    folder.updatePermissionsOnServer(fp);
                }
            }
            
            return null;
        }
        
        @Override
        protected void process(List<String> chunks) {
            String status = chunks.get(chunks.size() - 1); // Last status in list
            statusBar.setStatus(status, true);
        }
        
        @Override
        protected void done() {
            statusBar.hide();
            try {
                get();
            } catch (Exception e) {
                ExceptionHandling.handleSwingWorkerException(this.dialog.parent, e);
                return;
            }
            JOptionPane.showMessageDialog(this.dialog, "User has been added successfully!",
                            "Add User", JOptionPane.INFORMATION_MESSAGE);
            this.dialog.dispose();
            indexDialog.dispose();
        }
    }
}
